{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","type","placeholder","onChange","style","width","height","borderColor","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAaeA,G,YAVF,SAACC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,uBACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCUfC,G,MAXE,SAACR,GAEd,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAU,YAAf,SACFD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCsCbQ,E,kDA7Cb,aAAe,IAAD,8BACZ,gBASHC,aAAa,SAACC,GACL,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAT1C,EAAKC,MAAQ,CACXT,SAAS,GACTM,YAAY,IAJF,E,gEAiBM,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACL,SAASc,S,+BAI9B,IAAD,EAC2BC,KAAKN,MAA5BT,EADJ,EACIA,SAASM,EADb,EACaA,YACVU,EAAmBhB,EAASiB,QAAO,SAAAxB,GAAO,OAAEA,EAAQE,KAAKuB,cAAcC,SAASb,EAAYY,kBAErG,OACE,sBAAK5B,UAAU,MAAf,UAEE,iDACA,uBACA8B,KAAK,SACLC,YAAY,mBACZC,SAAUP,KAAKZ,aACfoB,MAAO,CAACC,MAAM,QAASC,OAAO,OAAQC,YAAY,WAElD,cAAC,EAAD,CAAU1B,SAAUgB,W,GAxCVW,aCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5c6a2077.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&180x180`}/>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\n\r\nimport Card from '../card/card.component'\r\n\r\nimport './card-list.styles.css'\r\n\r\n\r\nconst CardList = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className='card-list'>\r\n     {props.monsters.map(monster=>\r\n        (<Card key={monster.id} monster={monster}/>\r\n        ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from '../src/component/card-list/card-list.component'\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters:[],\n      searchField:''\n    };\n\n    // this.handleChange=this.handleChange.bind(this)\n  }\n\n handleChange=(e)=>{\n          this.setState({searchField:e.target.value})\n\n\n }\n\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=>this.setState({monsters:users}))\n  }\n   \n\n  render(){\n       const {monsters,searchField}= this.state;\n       const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n\n        <h1>Monster Rolodex</h1>\n        <input \n        type='search'\n        placeholder='Search moonsters'\n        onChange={this.handleChange}\n        style={{width:\"220px\" ,height:\"50px\" ,borderColor:\"white\"}}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}